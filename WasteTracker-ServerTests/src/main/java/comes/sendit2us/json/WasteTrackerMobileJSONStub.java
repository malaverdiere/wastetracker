/**
 * Stub generated with JSON Stub Generator/Israel E. Bethencourt
 * (c) 2010, Daniel M. Lambea 
 */
package comes.sendit2us.json;

import java.util.ArrayList;

import org.json.JSONArray;
import org.json.JSONException;
import org.json.JSONObject;

import es.sendit2us.wastetracker.server.facade.AssignResponse;
import es.sendit2us.wastetracker.server.facade.PickupDetail;
import es.sendit2us.wastetracker.server.facade.PickupHeader;
import es.sendit2us.wastetracker.server.model.CategoryIncidenceEntity;
import es.sendit2us.wastetracker.server.model.WasteDescriptionEntity;

/**
 * Autogenerated stub from WasteTrackerMobile.
 */
public class WasteTrackerMobileJSONStub {

	public JSONObject encodePickupHeader(PickupHeader h) throws JSONException {
		JSONObject jsonObj = new JSONObject();
		jsonObj.put("name", h.getName());
		jsonObj.put("id", h.getId());
		jsonObj.put("code", h.getCode());
		jsonObj.put("customerAuthCode", h.getCustomerAuthCode());
		jsonObj.put("address", h.getAddress());
		jsonObj.put("pickupDate", h.getPickupDate());
		jsonObj.put("deliveryDate", h.getDeliveryDate());
		jsonObj.put("deviceCode", h.getDeviceCode());
		jsonObj.put("msgError", h.getMsgError());
		if(h.getDetail() != null) {
			JSONArray jsonDet = new JSONArray();			
			jsonObj.put("detail", jsonDet);
			for(PickupDetail d: h.getDetail()) {
				JSONObject djs = encodePickupDetail(d);
				jsonDet.put(djs);
			}
		}
		return jsonObj;
	}
	
	public PickupHeader decodePickupHeader(JSONObject jsonObj) throws JSONException {
		PickupHeader result = new PickupHeader();
		result.setName(jsonObj.optString("name"));
		result.setId(jsonObj.optInt("id"));
		result.setCode(jsonObj.optString("code"));
		result.setCustomerAuthCode(jsonObj.optString("customerAuthCode"));
		result.setAddress(jsonObj.optString("address"));
		result.setPickupDate(jsonObj.getLong("pickupDate"));
		result.setDeliveryDate(jsonObj.getLong("deliveryDate"));
		result.setDeviceCode(jsonObj.optString("deviceCode"));
		result.setMsgError(jsonObj.optString("msgError", null));
		result.setDetail(new ArrayList<PickupDetail>());
		try {
			JSONArray jsonDet = jsonObj.getJSONArray("detail");
			for(int i = 0; i < jsonDet.length(); i++) {
				JSONObject jd = (JSONObject)jsonDet.get(i);
				result.getDetail().add(decodePickupDetail(jd));
				
			}
		} catch(JSONException e) {
			result.setDetail(null);
		}
		return result;
	}

	public JSONObject encodePickupDetail(PickupDetail det) throws JSONException {
		JSONObject jsonObj = new JSONObject();
		jsonObj.put("categoryCode", det.getCategoryCode());
		jsonObj.put("categoryDesc", det.getCategoryDesc());
		jsonObj.put("containerCode", det.getContainerCode());
		jsonObj.put("containerDescr", det.getContainerDescr());
		jsonObj.put("familyCode", det.getFamilyCode());
		jsonObj.put("familyDesc", det.getFamilyDesc());
		jsonObj.put("id", det.getId());
		jsonObj.put("state", det.getState());
		jsonObj.put("usageCode", det.getUsageCode());
		jsonObj.put("usageDesc", det.getUsageDesc());
		return jsonObj;
	}
	
	public PickupDetail decodePickupDetail(JSONObject jsonObj) throws JSONException {
		PickupDetail result = new PickupDetail();
		result.setCategoryCode(jsonObj.optString("categoryCode"));
		result.setCategoryDesc(jsonObj.optString("categoryDesc"));
		result.setContainerCode(jsonObj.optString("containerCode"));
		result.setContainerDescr(jsonObj.optString("containerDescr"));
		result.setFamilyCode(jsonObj.optString("familyCode"));
		result.setFamilyDesc(jsonObj.optString("familyDesc"));
		result.setId(jsonObj.getInt("id"));
		result.setState(jsonObj.getInt("state"));
		result.setUsageCode(jsonObj.optString("usageCode"));
		result.setUsageDesc(jsonObj.optString("usageDesc"));
		return result;
	}
	
	public PickupHeader[] decodePickupHeaderList(JSONArray jsonObj) throws JSONException {
		PickupHeader[] res = new PickupHeader[jsonObj.length()];
		
		for(int i = 0; i < jsonObj.length(); i++) {
			JSONObject it = (JSONObject)jsonObj.get(i);
			PickupHeader wd = decodePickupHeader(it);
			res[i] = wd;
		}
		return res;
	}

	public AssignResponse decodeAssignResponse(JSONObject jsonObj) throws JSONException {
		AssignResponse result = new AssignResponse();
		JSONArray dummyJSONArray0 = jsonObj.getJSONArray("assigned");
		int len0 = dummyJSONArray0.length();
		PickupHeader[] dummy0 = new PickupHeader[len0];
		for (int idx0 = 0; idx0 < len0; idx0++) {
			dummy0[idx0] = decodePickupHeader(dummyJSONArray0.getJSONObject(idx0));
		}
		result.setAssigned(dummy0);
		result.setMessage(jsonObj.optString("message"));
		return result;
	}

	public CategoryIncidenceEntity decodeCategoryIncidenceEntity(JSONObject jsonObj) throws JSONException {
		CategoryIncidenceEntity result = new CategoryIncidenceEntity();
		result.setId(jsonObj.getInt("id"));
		result.setCode(jsonObj.getString("code"));
		result.setDescription(jsonObj.getString("description"));
		return result;
	}

	public CategoryIncidenceEntity[] decodeCategoryIncidenceList(JSONArray jsonObj) throws JSONException {
		CategoryIncidenceEntity[] res = new CategoryIncidenceEntity[jsonObj.length()];
		
		for(int i = 0; i < jsonObj.length(); i++) {
			JSONObject it = (JSONObject)jsonObj.get(i);
			CategoryIncidenceEntity wd = decodeCategoryIncidenceEntity(it);
			res[i] = wd;
		}
		return res;
	}

	public WasteDescriptionEntity decodeWasteDescriptionEntity(JSONObject jsonObj) throws JSONException {
		WasteDescriptionEntity result = new WasteDescriptionEntity();
		result.setId(jsonObj.getInt("id"));
		result.setCode(jsonObj.getString("code"));
		result.setDescription(jsonObj.getString("description"));
		return result;
	}

	public WasteDescriptionEntity[] decodeWasteDescriptionList(JSONArray jsonObj) throws JSONException {
		WasteDescriptionEntity[] res = new WasteDescriptionEntity[jsonObj.length()];
		
		for(int i = 0; i < jsonObj.length(); i++) {
			JSONObject it = (JSONObject)jsonObj.get(i);
			WasteDescriptionEntity wd = decodeWasteDescriptionEntity(it);
			res[i] = wd;
		}
		return res;
	}	
}

